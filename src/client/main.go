package main

import (
	"context"
	"encoding/json"
	"fmt"
	"html/template"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"reflect"
	"runtime"
	"strings"
	"time"

	"github.com/google/uuid"
	"learn.oauth.client/model"
)

var config = struct {
	authURL              string
	logoutURL            string
	afterLogoutRecirect  string
	clientID             string
	clientPWD            string
	authCodeCallback     string
	tokenIssuerURL       string
	utilitiesEndpointURI string
}{
	authURL:              "http://192.168.100.101:8080/auth/realms/learningApp/protocol/openid-connect/auth",
	logoutURL:            "http://192.168.100.101:8080/auth/realms/learningApp/protocol/openid-connect/logout",
	tokenIssuerURL:       "http://192.168.100.101:8080/auth/realms/learningApp/protocol/openid-connect/token",
	afterLogoutRecirect:  "http://localhost:3000/",
	clientID:             "billingApp",
	clientPWD:            "3bd73711-a702-4494-82ea-d280ea5a855c",
	authCodeCallback:     "http://localhost:3000/authCodeRedirect",
	utilitiesEndpointURI: "http://localhost:4000/billing/v1/utilities",
}

//Variáveis privadas da aplicação.
type AppVar struct {
	AuthCode           string
	SessionState       string
	AccessToken        string
	RefreshToken       string
	Scope              string
	Utilities          []string
	ErrorMessage       string
	AutoGeneratedState map[string]struct{}
}

func newAppVar() AppVar {
	return AppVar{AutoGeneratedState: make(map[string]struct{})}
}

type ClientError struct {
	Error string `json:"error"`
}

var appVar = newAppVar()

func init() {
	log.SetFlags(log.Ldate + log.Ltime + log.Lmicroseconds + log.LUTC)
}

func main() {
	fmt.Println("OK")
	http.HandleFunc("/", enableLog(home))
	http.HandleFunc("/login", enableLog(login))
	http.HandleFunc("/refreshToken", enableLog(refreshToken))
	http.HandleFunc("/utilities", enableLog(utilities))
	http.HandleFunc("/logout", enableLog(logout))
	http.HandleFunc("/authCodeRedirect", enableLog(authCodeRedirect))
	http.ListenAndServe(":3000", nil)
}

func enableLog(handler func(http.ResponseWriter, *http.Request)) func(http.ResponseWriter, *http.Request) {

	handlerName := runtime.FuncForPC(reflect.ValueOf(handler).Pointer()).Name()
	return func(w http.ResponseWriter, r *http.Request) {
		log.SetPrefix(handlerName + " ")
		log.Println("---> " + handlerName)
		log.Printf("request: %v", r.RequestURI)
		handler(w, r)
		log.Println("<--- " + handlerName + "\n")
	}
}

func home(w http.ResponseWriter, r *http.Request) {
	t := template.Must(template.ParseFiles("template/index.html"))
	t.Execute(w, appVar)
}

func login(w http.ResponseWriter, r *http.Request) {
	appVar = newAppVar()
	req, err := http.NewRequest("GET", config.authURL, nil)
	if err != nil {
		log.Print(err)
		return
	}
	//req.URL.RawQuery = "state=123abc&client_id=billingApp&response_type=code"

	stateMapIndex := uuid.NewString()
	appVar.AutoGeneratedState[stateMapIndex] = struct{}{}
	qs := url.Values{}
	qs.Add("state", stateMapIndex)
	qs.Add("client_id", config.clientID)
	qs.Add("response_type", "code")
	//Parâmetros opcionais, escopo e o callback depois do login feito no IAM
	qs.Add("scope", "getUtilitiesService")
	qs.Add("redirect_uri", config.authCodeCallback)

	req.URL.RawQuery = qs.Encode()

	http.Redirect(w, r, req.URL.String(), http.StatusFound)
}

func logout(w http.ResponseWriter, r *http.Request) {

	req, err := http.NewRequest("GET", config.logoutURL, nil)
	if err != nil {
		log.Print(err)
		return
	}

	qs := url.Values{}
	qs.Add("redirect_uri", config.afterLogoutRecirect)

	req.URL.RawQuery = qs.Encode()
	appVar = newAppVar()
	http.Redirect(w, r, req.URL.String(), http.StatusFound)
}

func authCodeRedirect(w http.ResponseWriter, r *http.Request) {

	stateMapIndex := r.URL.Query().Get("state")
	if _, ok := appVar.AutoGeneratedState[stateMapIndex]; !ok {
		buildErrorMessage(w, "Estado Inválido.")
	}
	delete(appVar.AutoGeneratedState, stateMapIndex)
	appVar.AuthCode = r.URL.Query().Get("code")
	appVar.SessionState = r.URL.Query().Get("session_state")
	r.URL.RawQuery = ""
	fmt.Printf("Request query: %+v\n", appVar)
	exchangeToken()
	http.Redirect(w, r, "/", http.StatusFound)
}

func exchangeToken() {
	//Request
	form := url.Values{}
	form.Add("grant_type", "authorization_code")
	form.Add("code", appVar.AuthCode)
	form.Add("redirect_uri", config.authCodeCallback)
	form.Add("client_id", config.clientID)
	req, err := http.NewRequest("POST", config.tokenIssuerURL, strings.NewReader(form.Encode()))
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	if err != nil {
		log.Print(err)
		return
	}

	req.SetBasicAuth(config.clientID, config.clientPWD)
	//Client
	c := http.Client{}
	res, err := c.Do(req)
	if err != nil {
		log.Print(err)
		return
	}

	//Process response
	byteBody, err := ioutil.ReadAll(res.Body)
	defer res.Body.Close()
	if err != nil {
		log.Print(err)
		return
	}

	accessTokenResponse := &model.AccessTokenResponse{}

	json.Unmarshal(byteBody, accessTokenResponse)

	appVar.AccessToken = accessTokenResponse.AccessToken
	appVar.RefreshToken = accessTokenResponse.RefreshToken
	appVar.Scope = accessTokenResponse.Scope
	log.Printf("AccessToken: %v", appVar.AccessToken)
	log.Printf("RefreshToken: %v", appVar.RefreshToken)
	log.Printf("Scope: %v", appVar.Scope)

	//http.Redirect(w, r, "/", http.StatusFound)
	// t := template.Must(template.ParseFiles("template/index.html"))
	// t.Execute(w, appVar)
}

func utilities(w http.ResponseWriter, r *http.Request) {

	utilitiesTemplate := template.Must(template.ParseFiles("template/index.html", "template/utilities.html"))

	//request
	req, err := http.NewRequest("GET", config.utilitiesEndpointURI, nil)
	if err != nil {
		log.Print(err)
		utilitiesTemplate.Execute(w, appVar)
		return
	}
	if appVar.AccessToken != "" {
		req.Header.Add("Authorization", "Bearer "+appVar.AccessToken)
	}

	//client
	ctx, cancelFunc := context.WithTimeout(context.Background(), 500*time.Millisecond)
	defer cancelFunc()

	c := http.Client{}
	res, err := c.Do(req.WithContext(ctx))
	if err != nil {
		log.Print(err)
		utilitiesTemplate.Execute(w, appVar)
		return
	}

	//process response

	byteBody, err := ioutil.ReadAll(res.Body)
	defer res.Body.Close()
	if err != nil {
		log.Print(err)
		utilitiesTemplate.Execute(w, appVar)
		return
	}

	log.Println("Service Response: ", string(byteBody))

	if res.StatusCode != 200 {
		log.Println("Status Code returned: ", res.StatusCode)
		log.Println("Status returned: ", res.Status)
		errorResponse := &model.ErrorResponse{}
		err = json.Unmarshal(byteBody, errorResponse)
		if err != nil {
			log.Print(err)
			return
		}

		appVar.Utilities = []string{}
		appVar.ErrorMessage = errorResponse.Error
		utilitiesTemplate.Execute(w, appVar)
		return
	} else {
		appVar.ErrorMessage = ""
	}

	billingResponse := &model.Billing{}
	err = json.Unmarshal(byteBody, billingResponse)
	appVar.Utilities = billingResponse.Utilities

	if err != nil {
		log.Print(err)
		return
	}

	utilitiesTemplate.Execute(w, appVar)
}

func buildErrorMessage(w http.ResponseWriter, message string) {
	s := &ClientError{Error: message}
	encoder := json.NewEncoder(w)
	w.Header().Add("Content-Type", "application/json")
	w.WriteHeader(http.StatusBadRequest)
	encoder.Encode(s)
}

func refreshToken(w http.ResponseWriter, r *http.Request) {
	//Criar um request
	form := url.Values{}
	form.Add("grant_type", "refresh_token")
	form.Add("refresh_token", appVar.RefreshToken)
	log.Printf("Usando o RefreshToken: %v", appVar.RefreshToken)

	req, err := http.NewRequest("POST", config.tokenIssuerURL, strings.NewReader(form.Encode()))
	if err != nil {
		log.Print(err)
		return
	}

	//Fazer um request
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	req.SetBasicAuth(config.clientID, config.clientPWD)
	//Client
	c := http.Client{}
	res, err := c.Do(req)
	if err != nil {
		log.Print(err)
		return
	}
	//Processar a resposta
	//Na resposta vem um novo Refresh Token, tem que descartar o antigo e usar o novo Refresh Token para pegar um novo Token

	byteBody, err := ioutil.ReadAll(res.Body)
	defer res.Body.Close()

	if err != nil {
		log.Print(err)
		return
	}

	body := &model.AccessTokenResponse{}
	json.Unmarshal(byteBody, body)

	if res.StatusCode != 200 {
		log.Println("Status Code returned: ", res.StatusCode)
		log.Println("Status returned: ", res.Status)
		errorResponse := &model.ErrorResponse{}
		err = json.Unmarshal(byteBody, errorResponse)
		if err != nil {
			log.Print(err)
			return
		}

		appVar.Utilities = []string{}
		appVar.ErrorMessage = errorResponse.Error
		http.Redirect(w, r, "/", http.StatusFound)
		return
	} else {
		appVar.ErrorMessage = ""
	}

	appVar.AccessToken = body.AccessToken
	appVar.SessionState = body.SessionState
	appVar.RefreshToken = body.RefreshToken
	appVar.Scope = body.Scope

	log.Printf("AccessToken: %v", appVar.AccessToken)
	log.Printf("RefreshToken: %v", appVar.RefreshToken)
	log.Printf("Scope: %v", appVar.Scope)

	http.Redirect(w, r, "/", http.StatusFound)
}
